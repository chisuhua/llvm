//===-- PPUInstructionSelector.cpp -----------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// PPU.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "PPURegisterBankInfo.h"
#include "PPUSubtarget.h"
#include "PPUTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"
#include "llvm/Support/Debug.h"

#define DEBUG_TYPE "ppu-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class PPUInstructionSelector : public InstructionSelector {
public:
  PPUInstructionSelector(const PPUTargetMachine &TM,
                           const PPUSubtarget &STI,
                           const PPURegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const PPUSubtarget &STI;
  const PPUInstrInfo &TII;
  const PPURegisterInfo &TRI;
  const PPURegisterBankInfo &RBI;

  // FIXME: This is necessary because DAGISel uses "Subtarget->" and GlobalISel
  // uses "STI." in the code generated by TableGen. We need to unify the name of
  // Subtarget variable.
  const PPUSubtarget *Subtarget = &STI;
  bool EnableReconvergeCFG;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

PPUInstructionSelector::PPUInstructionSelector(
    const PPUTargetMachine &TM, const PPUSubtarget &STI,
    const PPURegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),
      EnableReconvergeCFG(STI.enableReconvergeCFG()),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "PPUGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool PPUInstructionSelector::select(MachineInstr &I) {

  if (!isPreISelGenericOpcode(I.getOpcode())) {
    // Certain non-generic instructions also need some special handling.
    return true;
  }

  if (selectImpl(I, *CoverageInfo))
    return true;

  return false;
}

namespace llvm {
InstructionSelector *
createPPUInstructionSelector(const PPUTargetMachine &TM,
                               PPUSubtarget &Subtarget,
                               PPURegisterBankInfo &RBI) {
  return new PPUInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
